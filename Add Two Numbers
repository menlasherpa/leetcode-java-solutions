/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode sumList = new ListNode();
        ListNode curr = sumList;
        ListNode p1 = l1;
        ListNode p2 = l2;
        int carry = 0;
       
        while(p1 != null || p2 != null) {
            int sum = carry;
            
            if(p1 != null) {
                sum += p1.val;
                p1 = p1.next;
            }
            
            if(p2 != null) {
                sum += p2.val;
                p2 = p2.next;
            }
            
            if(sum > 9) {
                carry = 1;
                sum %= 10;
            } else carry = 0;
            
            curr.next = new ListNode(sum);
            curr = curr.next;
        }
        
        if(carry > 0) curr.next = new ListNode(carry);
        
        return sumList.next;
 }
 
 // Another method
 class Solution {
  public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode sumList = new ListNode();
        ListNode curr = sumList;
        ListNode p1 = l1;
        ListNode p2 = l2;
        int carry = 0;
        
        while(p1 != null || p2 != null) {
            int a = (p1 != null) ? p1.val : 0;
            int b = (p2 != null) ? p2.val : 0;
            int sum = carry + a + b;
            carry = sum / 10;
            curr.next = new ListNode(sum % 10);
            curr = curr.next;
        }
        
        if(carry > 0) curr.next = new ListNode(carry);
        
        return sumList.next;
    }
}
