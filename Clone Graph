/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

// DFS
class Solution {
    public Node cloneGraph(Node node) {
        HashMap<Node, Node> map = new HashMap<>();
		return cloneGraph(node, map);
	}
    
	public Node cloneGraph(Node node, HashMap<Node, Node> map) {
		if(node == null)
			return node;
        
		if(map.containsKey(node)){
			return map.get(node);
		}
        
		Node copy = new Node(node.val);
		map.put(node, copy);
	
		for(Node n : node.neighbors){
			copy.neighbors.add(cloneGraph(n, map));
		}
        
		return copy;
    }
}

// BFS
class Solution {
	public Node cloneGraph(Node node) {
		if(node == null)
			return node;
        
		HashMap<Node, Node> map = new HashMap<>();
        map.put(node, new Node(node.val));
        
		Queue<Node> q = new LinkedList<>();
		q.add(node);
		
		while(!q.isEmpty()){
			Node curr = q.poll();
            
			for(Node n: curr.neighbors){
				if(!map.containsKey(n)){
					map.put(n, new Node(n.val));
					q.add(n);
				}
				map.get(curr).neighbors.add(map.get(n));
			}
		}
        
		return map.get(node);
	}
}
