/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        int count = 0;
        ListNode h1 = head;
        
        while (h1 != null) {
            h1 = h1.next;
            count++; // counting the number of nodes
        }
        
        if(n > count) return head; // no nodes to delete so returning as it is
        else if(n == count) return head.next;  // if [1,2] n = 2, it should delete 1 and return 2;
        else {
            ListNode prev = null;
            ListNode curr = head;

            int index = count - n;
            for(int i = 0; i < index; i++) {
                prev = curr;
                curr = curr.next;
            }

            prev.next = curr.next; // node deletion
            return head;
        }
    }
}

// Two pointer method
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummy = new ListNode();
        dummy.next = head;
        ListNode slow = dummy;
        ListNode fast = dummy;
        
        for(int i = 0; i < n; i++) fast = fast.next;
        
        while(fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next;
        }
        
        slow.next = slow.next.next;
        return dummy.next;
    }
 }
    
