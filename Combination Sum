class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
          List<List<Integer>> finalList = new ArrayList<>();
          helper(finalList, new ArrayList<>(), candidates, 0, 0, target);
          return finalList;
    }

    private static void helper(List<List<Integer>> finalList, List<Integer> tempList, int[] candidates, int sum, int startIndex, int target) {
          if(sum > target) return;
          
          else if(sum == target) finalList.add(new ArrayList<>(tempList));
          
          else { 
              for(int i = startIndex; i < candidates.length; i++){
                  tempList.add(candidates[i]);
                  helper(finalList, tempList, candidates, sum + candidates[i], i, target); 
                  tempList.remove(tempList.size() - 1);
              }
          }
    }
}

/*
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
          List<List<Integer>> finalList = new ArrayList<>();
          helper(finalList, new ArrayList<>(), candidates, target, 0);
          return finalList;
    }

    private static void helper(List<List<Integer>> finalList, List<Integer> tempList, int[] candidates, int remaining, int startIndex) {
          if(sum < 0) return;
          
          else if(sum == 0) finalList.add(new ArrayList<>(tempList));
          
          else { 
              for(int i = startIndex; i < candidates.length; i++){
                  tempList.add(candidates[i]);
                  helper(finalList, tempList, candidates, remaining - candidates[i], i); 
                  tempList.remove(tempList.size() - 1);
              }
          }
    }
}


*/
